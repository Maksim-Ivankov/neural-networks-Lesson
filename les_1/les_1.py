# https://www.youtube.com/watch?v=tMrbN67U9d4&list=PLQVvvaa0QuDcjD5BAw2DxE6OF2tius3V3&index=1
# 3 входа в 1 нейрон
inputs = [1.2, 5.1, 2.1] # входные данные
weights = [3.1, 2.1, 8.7] # вес
bias = 3 # смещение
# первый шаг к созданию нейрона - сложить все входные данные, умноженные на весы, плюс смещение
output = inputs[0]*weights[0] + inputs[1]*weights[1] + inputs[2]*weights[2] + bias
print(output)

# https://www.youtube.com/watch?v=tMrbN67U9d4&list=PLQVvvaa0QuDcjD5BAw2DxE6OF2tius3V3&index=2
# 4 входа в 3 нейрона
inputs = [1,2,3,2.5] # входные данные
weights1 = [0.2, 0.8, -0.5, 1.0] # вес
weights2 = [0.5, -0.91, 0.26, -0.5] # вес
weights3 = [-0.26, -0.27, 0.17, 0.87] # вес
bias1 = 2
bias2 = 3
bias3 = 0.5
output = [inputs[0]*weights1[0] + inputs[1]*weights1[1] + inputs[2]*weights1[2] + inputs[3]*weights1[3] + bias1,
          inputs[0]*weights2[0] + inputs[1]*weights2[1] + inputs[2]*weights2[2] + inputs[3]*weights2[3] + bias2,
          inputs[0]*weights3[0] + inputs[1]*weights3[1] + inputs[2]*weights3[2] + inputs[3]*weights3[3] + bias3,
          ]
          

print(output)
# задача глуюокого обучени - выяснить, как наилучшим образом настроить весы с учетом смещений, чтобы подобрать нужные нам выходные значения

# - https://www.youtube.com/watch?v=tMrbN67U9d4&list=PLQVvvaa0QuDcjD5BAw2DxE6OF2tius3V3&index=3
# оптимизация кода:
inputs = [1,2,3,2.5] # входные данные
weights = [[0.2, 0.8, -0.5, 1.0],
           [0.5, -0.91, 0.26, -0.5],
           [-0.26, -0.27, 0.17, 0.87]]
baises = [2, 3, 0.5]

layer_outputs = []
for neuron_weights, neuron_bais in zip(weights,baises):
    neuron_output = 0
    for n_input,weight in zip(inputs,neuron_weights):
        neuron_output+=n_input*weight
    neuron_output+=neuron_bais
    layer_outputs.append(neuron_output)
# код выше делает то же самое, что и на шаге 2, но в цикле, а не руками
print(layer_outputs)
# сейчас мы вводим руками веса и смещения, но дальше это бует делать автоматически оптимизатор
#--------------------------------------------------
# тензор - это объекьт, который может быть представлен в виде массива
# точечный подход:
import numpy as np

inputs = [1,2,3,2.5] # входные данные
weights = [0.2, 0.8, -0.5, 1.0]
baises = 2
output = np.dot(weights, inputs) + baises
print(output) # - получим такое же результат, как и раньше, но вычесления будут под капотом numpy - умножение скалярных векторов

# если передавать двумерные массивы, то это так же будет считаться правильно
inputs = [1,2,3,2.5] # входные данные
weights = [[0.2, 0.8, -0.5, 1.0],
           [0.5, -0.91, 0.26, -0.5],
           [-0.26, -0.27, 0.17, 0.87]]
baises = [2, 3, 0.5]
output = np.dot(weights, inputs) + baises # здесь важно, что входные данные передаются вторым параметром
print(output)
# смещение с точки зрения функции активации поможет опрделить, активируется ли данный нейрон, и если да, то в какой степени

# https://www.youtube.com/watch?v=TEWy9vZcxW4&list=PLQVvvaa0QuDcjD5BAw2DxE6OF2tius3V3&index=4
# взять выборку входных данных и преобразовать в пакет входных данных
# так же до этого мы моделировали один слой нейронов, здесь смоделируем несколько слоев нейронов
# нейроны хорошо кладутся на масштабирование объектов в ООП, поэтому мы перейдем на ООП
# inputs = [[1,2,3,2.5],
#           [2.0, 5.0, -1.0, 2.0],
#           [-1.5, 2.7, 3.3, -0.8]] # входные данные
# weights = [[0.2, 0.8, -0.5, 1.0],
#            [0.5, -0.91, 0.26, -0.5],
#            [-0.26, -0.27, 0.17, 0.87]]
# baises = [2, 3, 0.5]
# output = np.dot(weights, inputs) + baises # здесь важно, что входные данные передаются вторым параметром
# print(output)
# если сейчас запустить код выше, то будет шибка формы, т.к. перемножение при перемножении матриц будет неправильная размерность.
# чтобы это починить, нужно выполнить транспонирование - поменять местами строки и столбцы в матрице весов
inputs = [[1,2,3,2.5],
          [2.0, 5.0, -1.0, 2.0],
          [-1.5, 2.7, 3.3, -0.8]] # входные данные
weights = [[0.2, 0.8, -0.5, 1.0],
           [0.5, -0.91, 0.26, -0.5],
           [-0.26, -0.27, 0.17, 0.87]]
baises = [2, 3, 0.5]
output = np.dot(inputs, np.array(weights).T) + baises # здесь транспонируем (переворачиваем) матрицу weights, теперь входные данные должны идти первыми
print(output)
# далее сформируем второй слой
print('----------------')
# ниже два слоя нейронов
inputs = [[1,2,3,2.5],
          [2.0, 5.0, -1.0, 2.0],
          [-1.5, 2.7, 3.3, -0.8]] # входные данные
weights = [[0.2, 0.8, -0.5, 1.0],
           [0.5, -0.91, 0.26, -0.5],
           [-0.26, -0.27, 0.17, 0.87]]
baises = [2, 3, 0.5]
weights2 = [[0.1, -0.14,0.5],
            [-0.5,0.12,-0.33],
            [-0.44,0.73,-0.13]]
baises2 = [-1,2,-0.5]
layer1_output = np.dot(inputs, np.array(weights).T) + baises
layer2_output = np.dot(layer1_output, np.array(weights2).T) + baises2
print(layer2_output)
# но если писать таким образом, то очень мкоро кода станет настолько много, что он станет неуправляемым
# переходим к ООП
X = [[1,2,3,2.5], # X - стандарт в машинном обучении. Так обозначаютя входные параметры
    [2.0, 5.0, -1.0, 2.0],
    [-1.5, 2.7, 3.3, -0.8]] # входные данные

class Layer_Dense:
    def __init__(self):
        pass
    
    def forward(self):
        pass
# задача дальше - преобразовать входые данные к диапозону от 0 до 1





















